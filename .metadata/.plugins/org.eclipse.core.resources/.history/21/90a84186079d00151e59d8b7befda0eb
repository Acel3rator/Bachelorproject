package shallowThought.olmcts;

import shallowThought.AbstractSubAgent;
import core.game.StateObservation;
import ontology.Types;
import tools.ElapsedCpuTimer;

import java.util.Hashtable;
import java.util.ArrayList;
import java.util.Random;

public class OLMCTSAgent extends AbstractSubAgent {

	private static Hashtable<String, String> parameters = new Hashtable<String, String>();  
	// Parameters:
	public static int MCTS_ITERATIONS = 100;
    public static int ROLLOUT_DEPTH = 10;
    public static double K = Math.sqrt(2);
    public static double REWARD_DISCOUNT = 1.00;
    public static int NUM_TURNS = 3; // how many turns the mcts should run

    // Actions:
    public static int NUM_ACTIONS;
    public static Types.ACTIONS[] actions;
    
      
    protected SingleMCTSPlayer mctsPlayer;
    public int turnCount;
    
    /**
     * Public constructor with state observation and time due.
     * @param so state observation of the current game.
     * @param elapsedTimer Timer for the controller creation.
     */
    public OLMCTSAgent(StateObservation so, ElapsedCpuTimer elapsedTimer)
    {
        //Get the actions in a static array.
        ArrayList<Types.ACTIONS> act = so.getAvailableActions();
        actions = new Types.ACTIONS[act.size()];
        for(int i = 0; i < actions.length; ++i)
        {
            actions[i] = act.get(i);
        }
        NUM_ACTIONS = actions.length;

        //Create the player.
        mctsPlayer = getPlayer(so, elapsedTimer);

        addParameters();
    }
    
    /* Add parameters to the hashtable - hardcoded :( 
     * Fomrat: key - "<parameter name>", value - "<value> - <Datatype>" 
     * Datatype: Int, Double
     */
    private void addParameters() {
    	StringBuilder sb = new StringBuilder();
    	sb.append(MCTS_ITERATIONS);
    	sb.append(" - ");
    	sb.append("Int");
    	String value = sb.toString();
    	parameters.put("ROLLOUT_DEPTH", value);
    	
      	StringBuilder sb = new StringBuilder();
    	sb.append(ROLLPUTDEPTH);
    	sb.append(" - ");
    	sb.append("Int");
    	String value = sb.toString();
    	parameters.put("ROLLOUT_DEPTH", value);
    	
    	StringBuilder sb = new StringBuilder();
    	sb.append(K);
    	sb.append(" - ");
    	sb.append("Double");
    	String value = sb.toString();
    	parameters.put("K", value);
    	
    	StringBuilder sb = new StringBuilder();
    	sb.append(REWARD_DISCOUNT);
    	sb.append(" - ");
    	sb.append("Double");
    	String value = sb.toString();
    	parameters.put("REWARD_DISCOUNT", value);
    	
    	StringBuilder sb = new StringBuilder();
    	sb.append(NUM_TURNS);
    	sb.append(" - ");
    	sb.append("Int");
    	String value = sb.toString();
    	parameters.put("NUM_TURNS", value);
    }
    
    

    public SingleMCTSPlayer getPlayer(StateObservation so, ElapsedCpuTimer elapsedTimer) {
        return new SingleMCTSPlayer(new Random());
    }


    /**
     * Picks an action. This function is called every game step to request an
     * action from the player.
     * @param stateObs Observation of the current state.
     * @param elapsedTimer Timer when the action returned is due.
     * @return An action for the current state
     */
    public Types.ACTIONS act(StateObservation stateObs, ElapsedCpuTimer elapsedTimer) {

        //Set the state observation object as the new root of the tree.
    	if (turnCount == NUM_TURNS) {
    		mctsPlayer.init(stateObs);
    	}
    	else {
    		Types.ACTIONS action = Types.ACTIONS.ACTION_NIL;
    		turnCount++;
    	}
    	
    		
        //Determine the action using MCTS...
        int action = mctsPlayer.run(elapsedTimer);

        //... and return it.
        return actions[action];
    }
    
    public Hashtable<String, String> getParameters() {
    	return parameters;
    }
}
